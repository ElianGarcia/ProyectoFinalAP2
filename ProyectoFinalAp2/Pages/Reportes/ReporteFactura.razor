@page "/Reportes/Facturas"
@using ProyectoFinalAp2.Models;
@using ProyectoFinalAp2.Controllers;
@using ProyectoFinalAp2.Data;
@using System.IO;
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS


    <div class="card">
        <div class="card-header alert-info">
            <div class="text-center">
                <img src="Resources/favicon.ico" height="90" />
            </div>

            <div class="text-center">
                <h3 class="text-center text-black-50">ButterSoft</h3>
                <h3 class="text-center text-black-50">Reporte de Facturas</h3>
            </div>

            <div class="float-right mb-4">
                <label for="FECHA">Fecha de impresion: @Fecha </label>
            </div>
        </div>

        <div class="card-body">
            <table class="table mb-3">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>CLIENTE</th>
                        <th>FECHA</th>
                        <th>TOTAL</th>
                    </tr>
                </thead>
                <tbody class="table-striped">
                    @foreach (var item in lista)
                    {
                        <tr>
                            <td>@item.FacturaId</td>
                            <td>@GetNombre(item.ClienteId)</td>
                            <td>@item.Fecha</td>
                            <td>@item.Total</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
            <div class="form-group">
                <label>Total de Clientes</label>
                <input @bind="@total" class="form-control" readonly />
            </div>
        </div>
        <button class="btn btn-primary" @onclick="@ExportToPdf">Exportar a PDF</button>
    </div>


@code {

    List<Facturas> lista = new List<Facturas>();
    private String Fecha;
    private decimal total = 0;
    List<AuxFactura> auxLista;
    AuxFactura aux = new AuxFactura();

    protected override void OnInitialized()
    {
        Fecha = DateTime.Now.ToShortDateString();
        lista = FacturasBLL.GetList(c => true);
        CalcularTotal();
        CargarListaAux();
    }

    private void CalcularTotal()
    {
        decimal auxTotal = 0;
        foreach (var item in lista)
        {
            auxTotal += item.Total;
        }

        total = auxTotal;
    }

    protected async Task ExportToPdf()
    {
        using (MemoryStream excelStream = ExportService.CreatePdfFacturas(auxLista, DateTime.Now.ToString()))
        {
            await JS.SaveAs("Facturas.pdf", excelStream.ToArray());
        }
    }

    private void CargarListaAux()
    {
        try
        {
            this.auxLista = new List<AuxFactura>();
            if (lista != null)
            {
                foreach (var item in lista)
                {
                    this.auxLista.Add(new AuxFactura
                    {
                        ID = item.FacturaId,
                        Cliente = GetNombre(item.ClienteId),
                        Fecha = item.Fecha,
                        Total = item.Total
                    });
                }
            }
        }
        catch (Exception)
        {

            throw;
        }

    }

    private string GetNombre(int id)
    {
        var auxCliente = ClientesBLL.Buscar(id);
        string nombre = string.Empty;
        if (auxCliente != null)
            nombre = auxCliente.Nombre;
        else
            nombre = "Cliente Eliminado.";
        return nombre;

    }
}