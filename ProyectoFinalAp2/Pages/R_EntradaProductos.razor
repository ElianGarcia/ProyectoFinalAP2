@page "/EntradaProductos"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast

<h3>Registro de Entrada de Productos</h3>

<EditForm Model="entradaProductos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header">
        <div class="input-group">
            <label for="Id">ID</label> &nbsp;
            <InputNumber @bind-Value="entradaProductos.EntradaProductoId" class="form-control"></InputNumber>
            <ValidationMessage For="(() => entradaProductos.EntradaProductoId)"></ValidationMessage> &nbsp;&nbsp;
            <div class="input-group-append">
                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
            </div>

            &nbsp;&nbsp;
            <label for="FECHA">FECHA</label> &nbsp;&nbsp;
            <InputDate @bind-Value="entradaProductos.Fecha" class="form-control"></InputDate>
            <ValidationMessage For="(() => entradaProductos.Fecha)"></ValidationMessage>

        </div>
    </div> <br />

    <label for="ENTRADA">ENTRADA</label>
    <div class="card-header">
        <label for="PRODUCTOS">PRODUCTOS</label>
        <div class="input-group">
            <InputSelect @bind-Value="@entradaProductos.DetalleEntrada" class="form-control" @onchange="CargarProductos" @onclick="CargarProductos">
                <option value="" disabled selected>Seleccione un Producto</option>
                @foreach (var item in CargarCombo())
                {
                    <option value="@item.">@item.Descripcion</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => entradaProductos.DetalleEntrada)"></ValidationMessage>

            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" @onclick="Recargar"><span class="icon-update"></span>Recargar</button>
            </div>

            &nbsp;&nbsp;

            <label for="CANTIDAD">CANTIDAD</label>
            &nbsp;&nbsp;
            <div class="form-group">
                <InputNumber @bind-Value="entradaProductos.CantidadTotal" class="form-control"></InputNumber>
                <ValidationMessage For="(() => entradaProductos.CantidadTotal)"></ValidationMessage>
            </div>

            &nbsp;&nbsp;&nbsp;
            <div class="form-inline">
                <button type="button" class="btn btn-secondary" @onclick="Agregar"><span class="icon-add_chart"></span>Agregar</button>
            </div>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th> ID DE PRODUCTOS </th>
                <th> DESCRIPCION </th>
                <th> CANTIDAD </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in entradaProductos.DetalleEntrada)
            {
                <tr>
                    
                    <td><button class="btn btn-primary">Editar</button></td>
                    <td><button class="btn btn-danger">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="form-group">

        <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
        <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="icon-save"></span> Guardar </button>
        <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>

    </div>

</EditForm>


@code {

    private EntradaProductos entradaProductos;
    Productos productos = new Productos();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarCombo();
    }

    private void CargarProductos()
    {
        try
        {
            productos = ProductosBLL.Buscar(Convert.ToInt32(entradaProductos.DetalleEntrada));
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
    }

    private List<Productos> CargarCombo()
    {
        List<Productos> lista = new List<Productos>();
        lista = ProductosBLL.GetList(p => true);

        return lista;
    }

    private void Nuevo()
    {
        entradaProductos = new EntradaProductos();
    }

    private void Guardar()
    {
        bool guardado = EntradaProductoBLL.Guardar(entradaProductos);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo guardar");
        }

    }

    private void Recargar()
    {

    }

    private void Agregar()
    {
        
    }

    private void Eliminar()
    {
        bool eliminado = EntradaProductoBLL.Eliminar(entradaProductos.EntradaProductoId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
        {
            toast.ShowError("No se pudo eliminar");
        }

    }

    private void Buscar()
    {
        if (entradaProductos.EntradaProductoId > 0)
        {
            var Encontrado = EntradaProductoBLL.Buscar(entradaProductos.EntradaProductoId);

            if (Encontrado != null)
            {
                this.entradaProductos = Encontrado;
            }
        }
    }
}