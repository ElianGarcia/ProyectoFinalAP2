@page "/Consultas/Usuarios"
@page "/Consultas/Usuarios/{numPagina:int}"

@inject IToastService toast

@using ProyectoFinalAp2.Models;
@using ProyectoFinalAp2.Controllers;
@using ProyectoFinalAp2.Data;
@using ProyectoFinalAp2.Paginacion;
@using System.IO;
@using System.Linq.Expressions;

@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS

<EditForm Model="lista" OnValidSubmit="ExportToPdf">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header alert-info">
            <div class="text-center">
                <img src="Resources/favicon.ico" height="90" />
            </div>

            <div class="text-center">
                <h3 class="text-center text-black-50">Consulta de Usuarios</h3>
            </div>
        </div>

        <div class="card-body">
            <div class="form-row">
                <div class="form-group col">
                    <br />
                    <input class="align-self-center" type="checkbox" @bind-value="BuscarFecha" id="defaultCheck1">
                    <label for="DesdeFecha">Filtrar por fecha</label>
                </div>

                @if (BuscarFecha)
                {
                    <div class="form-group col">
                        <label for="DesdeFecha">Desde: </label>
                        <input id="DesdeFecha" type="date" @bind-value="DesdeFecha" class="form-control" input />
                    </div>

                    <div class="form-group col">
                        <label for="HastaFechaInput" class="mr-3">Hasta: </label>
                        <input type="date" Id="HastaFechaInput" @bind-value="HastaFecha" class="form-control" />
                    </div>
                }

                <div class="form-group col">
                    <label for="filtro">Filtro: </label>
                    <select class="form-control" @bind="Filtro">
                        <option value="" disabled selected>Seleccione un filtro</option>
                        <option value="1">Todo</option>
                        <option value="2">ID</option>
                        <option value="3">Nombre</option>
                        <option value="4">Nombre de Usuario</option>
                    </select>
                </div>

                <div class="form-group col">
                    <label for="criterio"> Criterio: </label>
                    <input type="search" class="form-control" @bind-value="Criterio" />
                </div>

                <div class="form-group col mt-1">
                    <br />
                    <button type="button" class="btn btn-outline-success" @onclick="Buscar">Buscar</button>
                </div>

                <table class="table">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Nombre de Usuario</th>
                            <th>Fecha de Ingreso</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in lista)
                        {
                            <tr>
                                <td>@item.UsuarioId</td>
                                <td>@item.Nombres</td>
                                <td>@item.NombreUsuario</td>
                                <td>@item.FechaIngreso</td>
                                <td><a class="btn btn-outline-info" href="Registros/Usuarios/@item.UsuarioId">Ver</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer">
                <label for="GANANCIA">Cantidad de usuarios registrados</label>
                <input @bind="@Cantidad" class="form-control" readonly />
            </div>

            <div class="form-group text-center">
                <ul class="pagination pagination-lg">
                    @for (int i = 1; i <= cantidadDePaginas; i++)
                    {
                        <li class="page-item Azul"><a class="page-link Azul" @onclick="SaltarPagina" href="Consultas/Usuarios/@i">@i</a></li>
                    }
                    <li class="page-item text-black-50"><a class="page-link text-black-50" @onclick="Salto"> ► </a></li>
                </ul>
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-outline-primary form-control" @onclick="ExportToPdf">Exportar a PDF</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int numPagina { get; set; }

    private double cantidadDePaginas { get; set; } = 0;
    private double cantidadDeLista { get; set; } = 0;
    private int contador { get; set; }
    Paginas pagina = new Paginas();

    private List<Usuarios> lista { get; set; }
    //para fines de impresion
    public List<Usuarios> auxUsuariosLista = new List<Usuarios>();

    private int Filtro { get; set; }
    private string Criterio { get; set; }
    public bool BuscarFecha { get; set; }
    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    int Cantidad;


    protected override void OnInitialized()
    {
        lista = new List<Usuarios>();
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
    }

    private decimal CalcularTotal()
    {
        Cantidad = 0;

        foreach (var usuario in lista)
        {
            Cantidad += 1;
        }
        return Cantidad;
    }

    private void ContarPaginas(Expression<Func<Usuarios, bool>> expression)
    {
        cantidadDeLista = UsuariosBLL.GetList(expression).Count();
        cantidadDePaginas = Math.Ceiling(cantidadDeLista / pagina.mostrarCantidad);
    }

    private void TomarPaginas(Expression<Func<Usuarios, bool>> expression)
    {
        lista = UsuariosBLL.GetList(expression);
        this.lista = UsuariosBLL.GetList(expression).Take(pagina.mostrarCantidad).ToList();
    }

    private void SaltarPagina()
    {
        contador = numPagina - 1;
        Salto();
    }

    private int GetAuxId()
    {
        int resultado = 0;

        try
        {
            resultado = Convert.ToInt32(Criterio);
            return resultado;
        }
        catch (Exception)
        {

        }

        return resultado;
    }

    private void Salto()
    {
        contador += pagina.pagina;
        contador = (contador >= cantidadDePaginas) ? 0 : contador;

        if (Filtro == 1)
        {
            this.lista = UsuariosBLL.GetList(p => true).Skip(contador * pagina.mostrarCantidad).Take(pagina.mostrarCantidad).ToList();
        }
        if (Filtro == 2)
        {
            int id = GetAuxId();
            this.lista = UsuariosBLL.GetList(p => p.UsuarioId == id).Skip(contador * pagina.mostrarCantidad).Take(pagina.mostrarCantidad).ToList();
        }
        if (Filtro == 3)
        {
            this.lista = UsuariosBLL.GetList(p => p.Nombres == Criterio).Skip(contador * pagina.mostrarCantidad).Take(pagina.mostrarCantidad).ToList();
        }
        if (Filtro == 4)
        {
            this.lista = UsuariosBLL.GetList(p => p.NombreUsuario == Criterio).Skip(contador * pagina.mostrarCantidad).Take(pagina.mostrarCantidad).ToList();
        }
    }

    private void Paginar(Expression<Func<Usuarios, bool>> expression)
    {
        ContarPaginas(expression);
        TomarPaginas(expression);
        SaltarPagina();
    }

    protected async Task ExportToPdf()
    {
        using (MemoryStream excelStream = ExportService.CreatePdfUsuarios(auxUsuariosLista, DateTime.Now.ToString(), Cantidad))
        {
            await JS.SaveAs("Usuarios.pdf", excelStream.ToArray());
        }
    }

    private async Task Buscar()
    {
        try
        {
            if (Filtro == 0)
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Debe seleccionar un filtro", false, 2000);
            }
            else
            {
                lista = UsuariosBLL.GetList(a => true);

                if (lista.Count == 0)
                {
                    await JS.Confirmar("top-center", "info", "Aviso", "No hay usuarios registrados", false, 2000);
                }
                else
                {
                    switch (Filtro)
                    {
                        case 1:
                            lista = UsuariosBLL.GetList(e => true);
                            Paginar(p => true);
                            break;
                        case 2:
                            lista = UsuariosBLL.GetList(e => e.UsuarioId == Convert.ToInt32(Criterio));
                            Paginar(e => e.UsuarioId == Convert.ToInt32(Criterio));
                            break;
                        case 3:
                            lista = UsuariosBLL.GetList(e => e.Nombres == Criterio);
                            Paginar(e => e.Nombres == Criterio);
                            break;
                        case 4:
                            lista = UsuariosBLL.GetList(e => e.NombreUsuario == Criterio);
                            Paginar(e => e.NombreUsuario == Criterio);
                            break;
                    }



                    if (BuscarFecha == true)
                    {
                        lista = lista.Where(p => p.FechaIngreso >= DesdeFecha.Date && p.FechaIngreso <= HastaFecha.Date).ToList();
                    }

                    if (lista.Count == 0)
                    {
                        await JS.Confirmar("top-center", "error", "Error", "No se han encontrado usuarios con este criterio", false, 2000);
                    }

                    auxUsuariosLista = lista;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        CalcularTotal();
    }
}