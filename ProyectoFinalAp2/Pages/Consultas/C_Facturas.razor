@page "/ConsultaFacturas"
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Models
@using System.IO;
@using ProyectoFinalAp2.Data;
@inject Microsoft.JSInterop.IJSRuntime JS
@inject ExportService exportService

@inject IToastService toast

<div class="card">

    <div class="card-header  alert-info">
        <div class="text-center">
            <img src="Resources/favicon.ico" height="90" />
        </div>

        <div class="text-center">
            <h3 class="text-center text-black-50">Consulta de Facturas</h3>
        </div>
    </div>

    <div class="card-body">
        <div class="form-row">
            <div class="form-group col">
                <br />
                <input class="align-self-center" type="checkbox" @bind="BuscarFecha" id="defaultCheck1">
                <label for="DesdeFecha">Filtrar por fecha</label>
            </div>

            @if (BuscarFecha)
            {
                <div class="form-group col">
                    <label for="DesdeFecha">Desde: </label>
                    <input id="DesdeFecha" type="date" @bind="DesdeFecha" class="form-control" input />
                </div>

                <div class="form-group col">
                    <label for="HastaFechaInput" class="mr-3">Hasta:</label>
                    <input type="date" Id="HastaFechaInput" @bind="HastaFecha" class="form-control" />
                </div>
            }

            <div class="form-group col">
                <label for="filtro">Filtro: </label>
                <select class="form-control" @bind="filtro">
                    <option value="" disabled selected>Seleccione un filtro</option>
                    <option value="1">TODO</option>
                    <option value="2">ID</option>
                    <option value="3">CLIENTE</option>
                    <option value="4">TOTAL</option>
                </select>
            </div>

            <div class="form-group col">
                <label for="criterio"> Criterio: </label>
                <input type="text" class="form-control" @bind="criterio" />
            </div>

            <div class="form-group col mt-1">
                <br />
                <button type="button" class="btn btn-outline-success" @onclick="Buscar">Buscar</button>
            </div>
        </div>

        <table class="table mb-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>CLIENTE</th>
                    <th>FECHA</th>
                    <th>TOTAL</th>
                </tr>
            </thead>
            <tbody class="table-striped">
                @foreach (var item in lista)
                {
                    <tr>
                        <td>@item.FacturaId</td>
                        <td>@GetNombre(item.ClienteId)</td>
                        <td>@item.Fecha</td>
                        <td>@item.Total</td>
                        <td><a class="btn btn-outline-info" href="Facturas/@item.FacturaId">Ver</a></td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="form-group">
            <label>Suma total</label>
            <input type="number" @bind="total" class="form-control" readonly />
        </div>
    </div>


    <div class="card-footer">
        <div class="form-group">
            <button type="button" class="btn btn-outline-primary form-control" @onclick="ExportToPdf">Exportar a PDF</button>
        </div>
    </div>
</div>

@code {

    List<Facturas> lista = new List<Facturas>();
    public bool BuscarFecha { get; set; }
    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    public int filtro;
    public string criterio = string.Empty;
    public decimal total = 0;

    protected override void OnInitialized()
    {
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
    }

    private async Task Buscar()
    {
        try
        {
            if (filtro == 0)
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Debe seleccionar un filtro", false, 2000);
            }
            else
            {
                switch (filtro)
                {
                    case 1: //Todos
                        this.lista = FacturasBLL.GetList(f => true);
                        break;
                    case 2: //Id
                        int ID = await GetId();
                        this.lista = FacturasBLL.GetList(f => f.FacturaId == ID);
                        break;
                    case 3: //cliente 
                        this.lista = FacturasBLL.GetList(f => f.Clientes.Nombre == criterio);
                        break;
                    case 4: //Total
                        decimal total = await GetTotal();
                        this.lista = FacturasBLL.GetList(f => f.Total == total);
                        break;
                }
                if (BuscarFecha == true)
                {
                    lista = lista.Where(f => f.Fecha.Date >= DesdeFecha.Date && f.Fecha.Date <= HastaFecha.Date).ToList();
                }
                if (lista == null)
                {
                    await JS.Confirmar("top-center", "info", "Aviso", "No se ha encontrado clientes.", false, 2000);
                }

                CalcularTotal();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    protected async Task ExportToPdf()
    {
        using (MemoryStream excelStream = ExportService.CreatePdfFacturas(lista, DateTime.Now.ToString()))
        {
            await JS.SaveAs("Facturas.pdf", excelStream.ToArray());
        }
    }

    private string GetNombre(int id)
    {
        var auxCliente = ClientesBLL.Buscar(id);
        string nombre = string.Empty;
        if (auxCliente != null)
            nombre = auxCliente.Nombre;
        else
            nombre = "Cliente Eliminado.";
        return nombre;

    }


    private async Task<int> GetId()
    {
        int resultado = 0;

        try
        {
            resultado = Convert.ToInt32(criterio);
            return resultado;
        }
        catch (Exception)
        {

            await JS.Confirmar("top-center", "error", "Error", "El Id debe ser numerico", false, 2000);
        }

        return resultado;
    }

    private async Task<decimal> GetTotal()
    {
        decimal total = 0;

        try
        {
            total = Convert.ToDecimal(criterio);
            return total;
        }
        catch (Exception)
        {

            await JS.Confirmar("top-center", "error", "Error", "El total debe ser numerico.", false, 2000);
        }

        return total;
    }

    private void CalcularTotal()
    {
        decimal auxTotal = 0;
        foreach (var item in lista)
        {
            auxTotal += item.Total;
        }

        total = auxTotal;
    }


}
