@page "/Categorias"
@page "/Categorias/{categoriaId:int}"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast
@inject IJSRuntime JS


<EditForm Model="categorias" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header alert-info">
            <h3>Registo de Categorias</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="categorias.CategoriaId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => categorias.CategoriaId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="Descripcion">Descripción</label>
                <InputText @bind-Value="categorias.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="(() => categorias.Descripcion)"></ValidationMessage>
            </div>
        </div>


        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>

    </div>
</EditForm>


@code {

    [Parameter]
    public int categoriaId { get; set; }


    Categorias categorias = new Categorias();

    protected override void OnInitialized()
    {
        Nuevo();
        var auxCliente = Buscar(categoriaId);
    }

    private void Nuevo()
    {
        this.categorias = new Categorias();
    }

    private async Task Buscar()
    {
        var encontrado = CategoriasBLL.Buscar(categorias.CategoriaId);
        if (encontrado != null)
            this.categorias = encontrado;
        else
            await JS.Confirmar("top-center", "info", "Aviso", "Categoria no encontrada", false, 2000);
    }

    private async Task Buscar(int id)
    {
        if (id > 0)
        {
            var auxCategoria = CategoriasBLL.Buscar(categoriaId);
            if (auxCategoria != null)
                this.categorias = auxCategoria;
            else
                await JS.Confirmar("top-center", "info", "Aviso", "Categoria no encontrada", false, 2000);
        }
    }

    private async Task Guardar()
    {
        if(categorias.CategoriaId == 0)
        {
            if (CategoriasBLL.YaExite(categorias.Descripcion))
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Esta descripción ya existe.", false, 2000);
                return;
            }
        }

        bool paso = false;
        if(categorias.CategoriaId == 0)
            paso = CategoriasBLL.Guardar(categorias);
        else
        {
            if (CategoriasBLL.ExisteParaModificar(categorias.CategoriaId)) //Compruebo si el registro a modificar existe
            {
                paso = CategoriasBLL.Guardar(categorias);
            }
        }


        if (paso)
        {
            Nuevo();
            await JS.Confirmar("top-center", "success", "Guardado Exitosamente", "Buen trabajo", false, 2000);
        }
        else
        {
            await JS.Confirmar("top-center", "error", "Error", "No fue posible guardar la categoria", false, 2000);
        }
    }

    private async Task Eliminar()
    {
        bool elimino;

        if(await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar esta categoria?", "question"))
        {
            elimino = CategoriasBLL.Eliminar(categorias.CategoriaId);

            if (elimino)
            {
                Nuevo();
                await JS.Confirmar("top-center", "success", "Eliminado", "Eliminado correctamente", false, 2000);
            }
            else
                await JS.Confirmar("top-center", "error", "Error", "No fue posible eliminar la categoria", false, 2000);
        }

    }


}
