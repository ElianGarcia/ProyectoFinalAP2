@page "/Categorias"
@page "/Categorias/{categoriaId:int}"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast


<EditForm Model="categorias" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header alert-info">
            <h3>Registo de Categorias</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="categorias.CategoriaId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => categorias.CategoriaId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="Descripcion">Descripción</label>
                <InputText @bind-Value="categorias.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="(() => categorias.Descripcion)"></ValidationMessage>
            </div>
        </div>


        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>

    </div>
</EditForm>


@code {

    [Parameter]
    public int categoriaId { get; set; }


    Categorias categorias = new Categorias();

    protected override void OnInitialized()
    {
        Nuevo();
        if (categoriaId > 0)
        {
            var auxCategoria = CategoriasBLL.Buscar(categoriaId);
            if (auxCategoria != null)
                this.categorias = auxCategoria;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    private void Nuevo()
    {
        this.categorias = new Categorias();
    }

    private void Buscar()
    {
        var encontrado = CategoriasBLL.Buscar(categorias.CategoriaId);
        if (encontrado != null)
            this.categorias = encontrado;
        else
            toast.ShowWarning("No encontrado");
    }

    private void Guardar()
    {

        bool paso;
        paso = CategoriasBLL.Guardar(categorias);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = CategoriasBLL.Eliminar(categorias.CategoriaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }


}
