@page "/Clientes"
@page "/Clientes/{clienteId:int}"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast

@inject IJSRuntime JS

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header  alert-info">
            <h3>Registro de Clientes</h3>
        </div>

        <div class="card-body">

            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="clientes.ClienteId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => clientes.ClienteId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="NOMBRE">NOMBRE</label>
                <InputText @bind-Value="clientes.Nombre" class="form-control"></InputText>
                <ValidationMessage For="(() => clientes.Nombre)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="RNC">RNC</label>
                <InputText @bind-Value="clientes.RNC" class="form-control"></InputText>
                <ValidationMessage For="(() => clientes.RNC)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="DIRECCION">DIRECCION</label>
                <InputText @bind-Value="clientes.Direccion" class="form-control"></InputText>
                <ValidationMessage For="(() => clientes.Direccion)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="TELEFONO">TELEFONO</label>
                <InputText @bind-Value="clientes.Telefono" class="form-control"></InputText>
                <ValidationMessage For="(() => clientes.Telefono)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="EMAIL">EMAIL</label>
                <InputText @bind-Value="clientes.Email" class="form-control"></InputText>
                <ValidationMessage For="(() => clientes.Email)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="FECHA">FECHA</label>
                <InputDate @bind-Value="clientes.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="(() => clientes.Fecha)"></ValidationMessage>
            </div>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>

</EditForm>


@code {

    [Parameter]
    public int clienteId { get; set; }

    Clientes clientes = new Clientes();

    protected override void OnInitialized()
    {
        Nuevo();
        var aux = Buscar(clienteId);
    }

    private void Nuevo()
    {
        this.clientes = new Clientes();
    }

    private async Task Guardar()
    {
        if(clientes.ClienteId == 0)
        {
            if(ClientesBLL.YaExiste(clientes.Nombre, 1)) //Nombre
            {
                await JS.Confirmar("top-center", "info", "Aviso", "El nombre de este cliente ya esta registrado.", false, 2000);
                return;
            }
            if(ClientesBLL.YaExiste(clientes.RNC, 2))
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Ya existe un cliente con el RNC colocado.", false, 2000);
                return;
            }
            if(ClientesBLL.YaExiste(clientes.Telefono, 3))
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Ya existe un cliente con el Telefono colocado.", false, 2000);
                return;
            }
            if(ClientesBLL.YaExiste(clientes.Email, 4))
            {
                await JS.Confirmar("top-center", "info", "Aviso", "Ya existe un cliente con el Email colocado.", false, 2000);
                return;
            }
        }

        bool paso = false;
        if(clientes.ClienteId == 0)
            paso = ClientesBLL.Guardar(clientes);
        else
        {
            if (ClientesBLL.ExisteParaModificar(clientes.ClienteId))
            {
                paso = ClientesBLL.Guardar(clientes);
            }
        }

        if (paso)
        {
            Nuevo();
            await JS.Confirmar("top-center", "success", "Guardado Exitosamente.", "Buen trabajo", false, 2000);
        }
        else
        {
            await JS.Confirmar("top-center", "error", "Error", "No fue posible guardar el cliente.", false, 2000);
        }

    }

    private async Task Eliminar()
    {
        bool elimino;

        if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar este cliente?", "question"))
        {
            elimino = ClientesBLL.Eliminar(clientes.ClienteId);

            if (elimino)
            {
                Nuevo();
                await JS.Confirmar("top-center", "success", "Eliminado", "Eliminado correctamente", false, 2000);
            }
            else
                await JS.Confirmar("top-center", "error", "Error", "No fue posible eliminar el cliente", false, 2000);
        }
    }

    private async Task Buscar()
    {
        var encontrado = ClientesBLL.Buscar(clientes.ClienteId);
        if (encontrado != null)
            this.clientes = encontrado;
        else
            await JS.Confirmar("top-center", "info", "Aviso", "Cliente no encontrada", false, 2000);
    }


    private async Task Buscar(int id)
    {
        if (id > 0)
        {
            var auxCliente = ClientesBLL.Buscar(id);
            if (auxCliente != null)
                this.clientes = auxCliente;
            else
                await JS.Confirmar("top-center", "info", "Aviso", "Cliente no encontrada", false, 2000);
        }
    }
}
