@page "/Registros/EntradaProductos"
@page "/Registros/EntradaProductos/{iD:int}"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.BLL; 
@using ProyectoFinalAp2.Data

@inject IToastService toast
@inject IJSRuntime JS

<EditForm Model="entradaProductos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header alert-info">
            <h3>Registro de Entrada de Productos</h3>
        </div>

        <div class="card-body">
            <div class="input-group">
                <label for="Id" class="mr-3">ID</label>
                <InputNumber @bind-Value="entradaProductos.EntradaProductoId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => entradaProductos.EntradaProductoId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>

                <label for="FECHA" class="ml-3 mr-3">Fecha</label>
                <InputDate @bind-Value="entradaProductos.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="(() => entradaProductos.Fecha)"></ValidationMessage>
            </div>

            <label for="Proveedor">Proveedor</label>
            <div class="form-group">
                <select class="form-control" @bind="productos.MarcaiD" @onclick="CargarProveedor">
                    <option value="" disabled selected>Seleccione un Proveedor</option>
                    @foreach (var item in CargarComboProveedores())
                    {
                        <option value="@item.ProveedorId">@item.Nombre</option>
                    }
                </select>
                <ValidationMessage For="(() => entradaProductos.ProveedorId)"></ValidationMessage>
            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label for="PRODUCTOS">Producto</label>
                    <div class="input-group">
                        <select @bind="@productoiD" class="form-control" @onclick="CargarProductos">
                            <option value="" disabled selected>Seleccione un Producto</option>
                            @foreach (var item in CargarCombo())
                            {
                                <option value="@item.ProductoId">@item.Descripcion</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group col">
                    <label for="CANTIDAD" class="ml-3 mr-3">Cantidad</label>
                    <div class="form-group">
                        <InputNumber @bind-Value="cantidad" class="form-control"></InputNumber>
                    </div>
                </div>

                <div class="form-inline ml-3">
                    <button type="button" class="btn btn-secondary" @onclick="Agregar"><span class="icon-add_chart"></span>Agregar</button>
                </div>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th> ID </th>
                        <th> Categoria </th>
                        <th> Descripción </th>
                        <th> Cantidad </th>
                        <th> Precio </th>
                        <th> Importe </th>
                    </tr>
                </thead>
                <tbody class="table-striped">
                    @foreach (var item in entradaProductos.DetalleEntrada)
                    {
                        <tr>
                            <td>@item.ProductoId</td>
                            <td>@GetCategoria(item.ProductoId)</td>
                            <td>@GetProducto(item.ProductoId)</td>
                            <td>@item.Cantidad</td>
                            <td>@GetPrecio(item)</td>
                            <td>@(item.Cantidad * GetPrecio(item))</td>
                            <td><button type="button" class="btn btn-outline-danger" @onclick="(()=> EliminarProducto(item))"><span class="icon-remove"> </span> Eliminar</button></td>
                        </tr>
                    }
                </tbody>
            </table>

            <label for="CANTIDAD" class="ml-3 mr-3">Cantidad Total</label>
            <div class="form-group">
                <InputNumber @bind-Value="entradaProductos.CantidadTotal" class="form-control" readonly="true"></InputNumber>
                <ValidationMessage For="(() => entradaProductos.CantidadTotal)"></ValidationMessage>
            </div>

            <div class="form-group text-center">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int iD { get; set; }

    Productos productos = new Productos();
    Proveedor proveedor = new Proveedor();
    EntradaProductos entradaProductos = new EntradaProductos();

    //variables del detalle
    public int productoiD { get; set; }
    public int cantidad { get; set; }

    protected override void OnParametersSet()
    {
        var id = iD;
        var result = Buscar(id);
    }

    protected override void OnInitialized()
    {
        Nuevo();
        var result = Buscar();
        CargarCombo();
    }

    private void CargarProveedor()
    {
        try
        {
            proveedor = ProveedorBLL.Buscar(Convert.ToInt32(entradaProductos.ProveedorId));
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
    }

    private List<Proveedor> CargarComboProveedores()
    {
        List<Proveedor> lista = new List<Proveedor>();
        lista = ProveedorBLL.GetList(p => true);

        return lista;
    }

    private void CargarProductos()
    {
        try
        {
            productos = ProductosBLL.Buscar(Convert.ToInt32(productoiD));
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
    }

    private List<Productos> CargarCombo()
    {
        List<Productos> lista = new List<Productos>();
        lista = ProductosBLL.GetList(p => true);

        return lista;
    }

    private void Nuevo()
    {
        productoiD = 0;
        productos = new Productos();
        entradaProductos = new EntradaProductos();
    }

    private async Task Guardar()
    {
        if (entradaProductos.DetalleEntrada.Count() == 0)
        {
            await JS.Confirmar("top-center", "info", "Información", "Debe agregar al menos un producto", false, 2000);
            return;
        }

        bool guardado = EntradaProductoBLL.Guardar(entradaProductos);

        if (guardado)
        {
            await JS.Confirmar("top-center", "success", "Guardado Exitosamente", "Buen trabajo", false, 2000);
            Nuevo();
        }
        else
        {
            await JS.Confirmar("top-center", "error", "Error", "No se pudo guardar", false, 2000);
        }
    }

    private void Agregar()
    {
        this.entradaProductos.DetalleEntrada.Add(new Entidades.DetalleEntradaProductos
        {
            DetalleEntradaProductosId = 0,
            EntradaProductoId = entradaProductos.EntradaProductoId,
            Cantidad = cantidad,
            ProductoId = productoiD
        });

        productoiD = 0;
        cantidad = 0;
        CalcularTotal();
    }

    private void CalcularTotal()
    {
        int total = 0;
        foreach (var item in entradaProductos.DetalleEntrada)
        {
            total += item.Cantidad;
        }
        entradaProductos.CantidadTotal = total;
    }

    private async Task Eliminar()
    {
        if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar este usuario?", "question"))
        {
            bool eliminado = EntradaProductoBLL.Eliminar(entradaProductos.EntradaProductoId);

            if (eliminado)
            {
                await JS.Confirmar("top-center", "success", "Eliminada", "Eliminada correctamente", false, 2000);
                Nuevo();
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No se pudo eliminar", false, 2000);
            }
        }
    }

    private string GetCategoria(int id)
    {
        string Categoria = "";
        try
        {
            Productos p = ProductosBLL.Buscar(id);
            int iD = p.CategoriaiD;
            if(iD > 0)
            {
                Categoria = CategoriasBLL.Buscar(iD).Descripcion;
            }
        }
        catch
        {
            Categoria = "Producto Eliminado";
        }

        return Categoria;
    }

    private decimal GetPrecio(Entidades.DetalleEntradaProductos item)
    {
        decimal Precio = 0;
        try
        {
            Productos p = ProductosBLL.Buscar(item.ProductoId);
            Precio = p.Precio;
        }
        catch
        {

        }

        return Precio;
    }

    private string GetProducto(int id)
    {
        string Producto = "";

        try
        {
            Producto = ProductosBLL.Buscar(id).Descripcion;
        }
        catch
        {
            Producto = "Producto Eliminado";
        }
        return Producto;
    }

    private async Task Buscar()
    {
        if (entradaProductos.EntradaProductoId > 0)
        {
            var Encontrado = EntradaProductoBLL.Buscar(entradaProductos.EntradaProductoId);

            if (Encontrado != null)
            {
                this.entradaProductos = Encontrado;
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No encontrada", false, 2000);
            }
        }
    }

    private async Task Buscar(int paramiD)
    {
        if (paramiD > 0)
        {
            var Encontrado = EntradaProductoBLL.Buscar(paramiD);

            if (Encontrado != null)
            {
                this.entradaProductos = Encontrado;
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No encontrada", false, 2000);
            }
        }
    }

    private void EliminarProducto(Entidades.DetalleEntradaProductos detalle)
    {
        entradaProductos.DetalleEntrada.Remove(detalle);
        entradaProductos.CantidadTotal -= detalle.Cantidad;
    }
}