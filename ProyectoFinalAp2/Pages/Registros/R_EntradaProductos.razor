@page "/EntradaProductos"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast

<EditForm Model="entradaProductos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header alert-info">
            <h3>Registro de Entrada de Productos</h3>
        </div>

        <div class="card-body">
            <div class="input-group">
                <label for="Id" class="mr-3">ID</label>
                <InputNumber @bind-Value="entradaProductos.EntradaProductoId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => entradaProductos.EntradaProductoId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>

                <label for="FECHA" class="ml-3 mr-3">FECHA</label>
                <InputDate @bind-Value="entradaProductos.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="(() => entradaProductos.Fecha)"></ValidationMessage>
            </div>

            <label for="ENTRADA" class="mt-3">ENTRADA</label>
            <div class="form-row">
                <div class="form-group col">
                    <label for="PRODUCTOS">PRODUCTOS</label>
                    <div class="input-group">
                        <select @bind="@productoiD" class="form-control" @onclick="CargarProductos">
                            <option value="" disabled selected>Seleccione un Producto</option>
                            @foreach (var item in CargarCombo())
                            {
                                <option value="@item.ProductoId">@item.Descripcion</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group col">
                    <label for="CANTIDAD" class="ml-3 mr-3">Cantidad</label>
                    <div class="form-group">
                        <InputNumber @bind-Value="cantidad" @onfocusout="VerificarCantidad" class="form-control"></InputNumber>
                    </div>
                </div>

                    <div class="form-inline ml-3">
                        <button type="button" class="btn btn-secondary" @onclick="Agregar"><span class="icon-add_chart"></span>Agregar</button>
                    </div>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th> ID </th>
                        <th> CATEGORIA </th>
                        <th> DESCRIPCION </th>
                        <th> CANTIDAD </th>
                        <th> PRECIO </th>
                        <th> IMPORTE </th>
                    </tr>
                </thead>
                <tbody class="table-striped">
                    @foreach (var item in entradaProductos.DetalleEntrada)
                    {
                    <tr>
                        <td>@item.ProductoId</td>
                        <td>@CategoriasBLL.Buscar(ProductosBLL.Buscar(item.ProductoId).CategoriaiD).Descripcion</td>
                        <td>@ProductosBLL.Buscar(item.ProductoId).Descripcion</td>
                        <td>@item.Cantidad</td>
                        <td>@ProductosBLL.Buscar(item.ProductoId).Precio</td>
                        <td>@(item.Cantidad * ProductosBLL.Buscar(item.ProductoId).Precio)</td>
                        <td><button type="button" class="btn btn-danger" @onclick="(()=> EliminarProducto(item))">Eliminar</button></td>
                    </tr>
                    }
                </tbody>
            </table>

            <label for="CANTIDAD" class="ml-3 mr-3">Cantidad Total</label>
            <div class="form-group">
                <InputNumber @bind-Value="entradaProductos.CantidadTotal" class="form-control" readonly="true"></InputNumber>
                <ValidationMessage For="(() => entradaProductos.CantidadTotal)"></ValidationMessage>
            </div>

            <div class="form-group">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    Productos productos = new Productos();
    EntradaProductos entradaProductos = new EntradaProductos();
    bool paso = false;

    //variables del detalle
    public static int productoiD { get; set; }
    public int cantidad { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarCombo();
    }

    private void CargarProductos()
    {
        try
        {
            productos = ProductosBLL.Buscar(Convert.ToInt32(productoiD));
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }
    }

    private List<Productos> CargarCombo()
    {
        List<Productos> lista = new List<Productos>();
        lista = ProductosBLL.GetList(p => true);

        return lista;
    }

    private void Nuevo()
    {
        entradaProductos = new EntradaProductos();
    }

    private void Guardar()
    {
        bool guardado = EntradaProductoBLL.Guardar(entradaProductos);


        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo guardar", "Error");
        }
    }

    private void Agregar()
    {
        if (paso)
        {
            this.entradaProductos.DetalleEntrada.Add(new Entidades.DetalleEntradaProductos
            {
                DetalleEntradaProductosId = 0,
                EntradaProductoId = entradaProductos.EntradaProductoId,
                Cantidad = cantidad,
                ProductoId = productoiD
            });

            CalcularTotal();
        }
        else
        {
            toast.ShowError("La cantidad requerida supera a la cantidad existente del producto", "Error");
        }
    }

    private void CalcularTotal()
    {
        decimal total = 0;
        foreach (var item in entradaProductos.DetalleEntrada)
        {
            total += item.Cantidad;
        }
        entradaProductos.CantidadTotal = total;
    }

    private void Eliminar()
    {
        bool eliminado = EntradaProductoBLL.Eliminar(entradaProductos.EntradaProductoId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo eliminar", "Error");
        }
    }

    private void Buscar()
    {
        if (entradaProductos.EntradaProductoId > 0)
        {
            var Encontrado = EntradaProductoBLL.Buscar(entradaProductos.EntradaProductoId);

            if (Encontrado != null)
            {
                this.entradaProductos = Encontrado;
            }
            else
            {
                toast.ShowError("No Encontrado", "Error");
            }
        }
    }

    private void EliminarProducto(Entidades.DetalleEntradaProductos detalle)
    {
        entradaProductos.DetalleEntrada.Remove(detalle);
    }

    private void VerificarCantidad()
    {
        if(productoiD > 0)
        {
            if (cantidad <= ProductosBLL.Buscar(productoiD).Cantidad)
            {
                paso = true;
            }
        }
    }
}