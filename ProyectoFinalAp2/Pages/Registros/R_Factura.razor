@page "/Facturas"
@page "/Facturas/{facturaId:int}"
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Data
@using System.IO;
@inject ExportService exportService

@inject IToastService toast
@inject IJSRuntime JS

<EditForm Model="facturas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header alert-info">
            <h3>Registro de Facturas</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="facturas.FacturaId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => facturas.FacturaId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            @*Fecha*@
            <div class="form-group">
                <label for="FECHA">FECHA</label>
                <InputDate @bind-Value="facturas.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="(() => facturas.Fecha)"></ValidationMessage>
            </div>

            @*Cliente*@
            <div class="form-group">
                <label>CLIENTE</label>
                <select class="form-control" @bind="facturas.ClienteId">
                    @foreach (var item in listaClientes)
                    {
                        <option value="@item.ClienteId">@item.Nombre</option>
                    }
                </select>
                <ValidationMessage For="@(() => facturas.ClienteId)" />
            </div>

            <div class="form-group">
                <div class="form-row">
                    @*Producto*@
                    <div class="col">
                        <label>PRODUCTO:</label>
                        <select class="form-control" @bind="productoSeleccionado" @onclick="EncontrarPrecio">
                            @foreach (var item in listaProductos)
                            {
                                <option value="@item.ProductoId">@item.Descripcion</option>
                            }
                        </select>
                    </div>
                    @*Precio*@
                    <div class="col">
                        <label>PRECIO:</label>
                        <InputNumber class="form-control" @bind-Value="precioEncontrado" readonly="true" />
                    </div>

                    @*Cantidad*@
                    <div class="col">
                        <label>CANTIDAD:</label>
                        <InputNumber @bind-Value="cantidadColocada" @onclick="CalcularImporte" @onfocusin="CalcularImporte" @onfocusout="CalcularImporte" class="form-control" />
                    </div>
                    @*Importe*@
                    <div class="col">
                        <label>IMPORTE</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="importe" class="form-control" readonly="true" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-info" @onclick="Agregar"><span class="icon-add_circle"></span>Agregar</button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            @*Detalle*@
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>DESCRIPCION</th>
                        <th>CANTIDAD</th>
                        <th>PRECIO</th>
                        <th>IMPORTE</th>
                    </tr>
                </thead>
                <tbody class="table-striped">
                    @foreach (var item in facturas.Detalles)
                    {
                        <tr>
                            <td>@item.ProductoId</td>
                            <td>@GetDescripcion(item.ProductoId)</td>
                            <td>@item.Cantidad</td>
                            <td>@item.Precio</td>
                            <td>@(item.Precio*item.Cantidad)</td>
                            <td><button type="button" class="btn btn-outline-danger" @onclick="(() => EliminarOrdenDetalle(item))"><span class="icon-remove"></span>Remover</button></td>
                        </tr>
                    }

                </tbody>

            </table>

            @*Total*@
            <div class="form-group">
                <label>TOTAL</label>
                <InputNumber @bind-Value="facturas.Total" class="form-control" readonly="true" />
                <ValidationMessage For="@(() => facturas.Total)" />
            </div>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
                <button type="button" class="btn btn-warning" @onclick="ExportToPdf"><span class="icon-pages"></span>Exportar a PDF</button>
            </div>
        </div>


    </div>


</EditForm>

@code {

    [Parameter]
    public int facturaId { get; set; }

    Facturas facturas = new Facturas();
    List<Clientes> listaClientes = new List<Clientes>();
    List<Productos> listaProductos = new List<Productos>();
    private int productoSeleccionado { get; set; }
    private int cantidadColocada { get; set; }
    private decimal precioEncontrado { get; set; }
    private decimal importe { get; set; }
    private List<AuxFacturaFinal> auxLista;


    protected override void OnInitialized()
    {
        Nuevo();

        var auxFactura = Buscar(facturaId);
        listaClientes = ClientesBLL.GetList(p => true);
        listaProductos = ProductosBLL.GetList(p => true);
    }


    private string GetDescripcion(int id)
    {
        string aux = string.Empty;
        var auxProducto = ProductosBLL.Buscar(id); ;
        if (auxProducto != null)
        {
            aux = auxProducto.Descripcion;

        }
        else
        {
            aux = "Producto eliminado";
        }
        return aux;
    }

    private void CalcularImporte()
    {
        decimal auxImporte = 0;
        auxImporte = cantidadColocada * precioEncontrado;
        importe = auxImporte;
    }


    private void Nuevo()
    {
        this.facturas = new Facturas();
        productoSeleccionado = 0;
        cantidadColocada = 0;
        precioEncontrado = 0;
        importe = 0;
    }

    private async Task Buscar()
    {
        var encontrado = FacturasBLL.Buscar(facturas.FacturaId);
        if (encontrado != null)
        {
            this.facturas = encontrado;
        }
        else
            await JS.Confirmar("top-center", "info", "Aviso", "Factura no encontrada.", false, 2000);
    }

    private async Task Buscar(int id)
    {
        if (id > 0)
        {
            var auxFactura = FacturasBLL.Buscar(facturaId);
            if (auxFactura != null)
                this.facturas = auxFactura;
            else
                await JS.Confirmar("top-center", "info", "Aviso", "Factura no encontrada.", false, 2000);
        }
    }

    private async Task Agregar()
    {
        if (productoSeleccionado == 0)
        {
            await JS.Confirmar("top-center", "info", "Aviso", "Seleccione un producto.", false, 2000);
            return;
        }

        if (cantidadColocada <= 0)
        {
            await JS.Confirmar("top-center", "info", "Aviso", "La cantidad debe ser mayor a cero.", false, 2000);
            return;
        }

        if (facturas.Detalles.Any(f => f.ProductoId == productoSeleccionado))
        {
            await JS.Confirmar("top-center", "info", "Aviso", "Este producto ya existe en el detalle.", false, 2000);
            return;
        }

        if (cantidadColocada > ProductosBLL.Buscar(productoSeleccionado).Cantidad)
        {
            await JS.Confirmar("top-center", "info", "Aviso", "La cantidad sobrepasa a la guardada.", false, 2000);
            return;
        }
        else
        {
            this.facturas.Detalles.Add(new DetalleFacturas
            {
                DetalleFacturaId = 0,
                FacturaId = facturas.FacturaId,
                ProductoId = productoSeleccionado,
                Cantidad = cantidadColocada,
                Precio = precioEncontrado
            });

            productoSeleccionado = 0;
            cantidadColocada = 0;
            precioEncontrado = 0;
            importe = 0;
        }
        CalcularTotal();

    }

    private async Task EliminarOrdenDetalle(DetalleFacturas detalle)
    {
        try
        {
            var auxProducto = ProductosBLL.Buscar(detalle.ProductoId);
            if (auxProducto != null)
            {
                facturas.Detalles.Remove(detalle);
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "Este producto fue eliminado en su modulo", false, 2000);
            }

            CalcularTotal();
        }
        catch (Exception)
        {

        }
    }

    private void EncontrarPrecio()
    {
        var auxProducto = ProductosBLL.Buscar(productoSeleccionado);
        if (auxProducto != null)
        {
            precioEncontrado = auxProducto.Precio;
        }
    }


    private void CalcularTotal()
    {
        decimal total = 0;
        foreach (var item in facturas.Detalles)
        {
            total += (item.Cantidad * item.Precio);
        }
        facturas.Total = total;
    }

    private async Task Guardar()
    {
        bool paso = false;

        if (facturas.Detalles.Count() == 0)
        {
            await JS.Confirmar("top-center", "info", "Aviso", "Debe agregar un detalle", false, 2000);
            return;
        }
        else
        {
            if (facturas.FacturaId == 0)
                paso = FacturasBLL.Guardar(facturas);
            else
            {
                if (FacturasBLL.ExisteParaModificar(facturas.FacturaId))
                    paso = FacturasBLL.Guardar(facturas);
            }


            if (paso)
            {
                await JS.Confirmar("top-center", "success", "Guardado Exitosamente", "Buen trabajo", false, 2000);
                if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea exportar esta factura?", "question"))
                {
                    var aux = ExportToPdf();
                }
                Nuevo();
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No fue posible guardar la factura", false, 2000);
            }
        }
    }

    private async Task Eliminar()
    {
        bool elimino;

        if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar esta factura?", "question"))
        {
            elimino = FacturasBLL.Eliminar(facturas.FacturaId);

            if (elimino)
            {
                Nuevo();
                await JS.Confirmar("top-center", "success", "Eliminado", "Eliminado correctamente", false, 2000);
            }
            else
                await JS.Confirmar("top-center", "error", "Error", "No fue posible eliminar la factura", false, 2000);
        }

    }

    private void CargarAuxLista()
    {
        this.auxLista = new List<AuxFacturaFinal>();
        if (this.facturas.Detalles.Count() != 0)
        {
            foreach (var item in facturas.Detalles)
            {
                this.auxLista.Add(new AuxFacturaFinal
                {
                    ID = item.ProductoId,
                    Descripcion = GetDescripcion(item.ProductoId),
                    Cantidad = item.Cantidad,
                    Precio = item.Precio,
                    Importe = item.Cantidad * item.Precio
                });
            }
        }
    }

    private string GetCliente(int id)
    {
        var aux = ClientesBLL.Buscar(id);
        string nombre = string.Empty;
        if (aux != null)
        {
            nombre = aux.Nombre;
        }
        else
            nombre = "Cliente Eliminado.";

        return nombre;
    }

    protected async Task ExportToPdf()
    {
        CargarAuxLista();
        if(this.facturas.Detalles.Count() == 0)
        {
            await JS.Confirmar("top-center", "info", "Aviso", "No hay nada para exportar.", false, 2000);
        }
        else
        {
            using (MemoryStream excelStream = ExportService.CreatePdfFacturaFinal(auxLista, DateTime.Now.ToString("dd/MM/yyyy"), GetCliente(facturas.ClienteId), facturas.Total.ToString(), facturas.FacturaId.ToString()))
            {
                await JS.SaveAs("FacturaConsumidorFinal.pdf", excelStream.ToArray());
            }
        }
    }

}
