@page "/Usuarios"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using ProyectoFinalAp2.Data

@inject IToastService toast

<EditForm Model="usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header alert-info">
            <h3>Registro de Usuarios</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => usuarios.UsuarioId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="NOMBRES">Nombres</label>
                <InputText @bind-Value="usuarios.Nombres" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.Nombres)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="NOMBREUSUARIO">Nombre de usuario</label>
                <InputText @bind-Value="usuarios.NombreUsuario" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.NombreUsuario)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="CORREO">Correo</label>
                <InputText @bind-Value="usuarios.Correo" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.Correo)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="PASSWORD">Contraseña</label>
                <InputText @bind-Value="usuarios.PassWord" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.PassWord)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="FECHAINGRESO">Fecha de ingreso</label>
                <InputDate @bind-Value="usuarios.FechaIngreso" class="form-control"></InputDate>
                <ValidationMessage For="(() => usuarios.FechaIngreso)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="NIVEL">NIVEL</label>
                <select id="dropdowntipo" class="form-control" @bind="@Nivel">
                    <option value="Exemplo1">Administrador</option>
                    <option value="Exemplo2">Usuario</option>
                </select>
            </div>

            <div class="form-group">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    Usuarios usuarios = new Usuarios();
    string Nivel { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
    }

    private void Nuevo()
    {
        usuarios = new Usuarios();
    }

    private void Guardar()
    {
        usuarios.Nivel = Nivel;
        bool guardado = UsuariosBLL.Guardar(usuarios);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Corectamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo guardar", "Error");
        }
    }

    private void Eliminar()
    {
        bool eliminado = UsuariosBLL.Eliminar(usuarios.UsuarioId);

        if(eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Corectamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo eliminar", "Error");
        }
    }

    private void Buscar()
    {
        if (usuarios.UsuarioId > 0)
        {
            var Encontrado = UsuariosBLL.Buscar(usuarios.UsuarioId);

            if (Encontrado != null)
            {
                this.usuarios = Encontrado;
            }
        }
    }

}
