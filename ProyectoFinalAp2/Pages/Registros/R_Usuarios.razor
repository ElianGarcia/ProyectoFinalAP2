@page "/Registros/Usuarios"
@page "/Registros/Usuarios/{UsuarioId:int}"
@using ProyectoFinalAp2.Models
@using ProyectoFinalAp2.Controllers
@using System.Threading.Tasks
@using System.Net.Mail
@using System.Net

@inject IToastService toast
@inject IJSRuntime JS

<EditForm Model="usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header alert-info">
            <h3>Registro de Usuarios</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="usuarios.UsuarioId" class="form-control"></InputNumber>
                <ValidationMessage For="(() => usuarios.UsuarioId)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="NOMBRES">Nombres</label>
                <InputText @bind-Value="usuarios.Nombres" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.Nombres)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="NOMBREUSUARIO">Nombre de usuario</label>
                <InputText @bind-Value="usuarios.NombreUsuario" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.NombreUsuario)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="CORREO">Correo</label>
                <InputText @bind-Value="usuarios.Correo" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.Correo)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="PASSWORD">Contraseña</label>
                <InputText @bind-Value="usuarios.PassWord" class="form-control"></InputText>
                <ValidationMessage For="(() => usuarios.PassWord)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="FECHAINGRESO">Fecha de ingreso</label>
                <InputDate @bind-Value="usuarios.FechaIngreso" class="form-control"></InputDate>
                <ValidationMessage For="(() => usuarios.FechaIngreso)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label for="NIVEL">Nivel</label>
                <select id="dropdowntipo" class="form-control" @bind="@usuarios.Nivel">
                    <option value="" disabled selected>Seleccione un nivel</option>
                    <option value="Exemplo1">Administrador</option>
                    <option value="Exemplo2">Usuario</option>
                </select>
            </div>

            <div class="form-group text-center">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
                <button type="button" class="btn btn-dark" @onclick="EnviarMail"><span class="icon-restore_page"></span> Restablecer contraseña </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int UsuarioId { get; set; }

    Usuarios usuarios = new Usuarios();

    protected override void OnParametersSet()
    {
        var id = UsuarioId;
        var result = Buscar(id);
    }

    protected override void OnInitialized()
    {
        Nuevo();
        var result = Buscar();
    }

    private void Nuevo()
    {
        usuarios = new Usuarios();
    }

    private bool Existe()
    {
        var lista = UsuariosBLL.GetList(p => true);
        bool paso = false;

        foreach (var usuario in lista)
        {
            if (usuario.NombreUsuario == usuarios.NombreUsuario)
            {
                return paso = true;
            }
        }

        return paso;
    }

    private async Task Guardar()
    {
        usuarios.PassWord = UsuariosBLL.encode(usuarios.PassWord);

        if (!Existe())
        {
            bool guardado = UsuariosBLL.Guardar(usuarios);

            if (guardado)
            {
                await JS.Confirmar("top-center", "success", "Guardado Exitosamente", "Buen trabajo", false, 2000);
                Nuevo();
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No se pudo guardar el usuario", false, 2000);
            }
        }
        else
        {
            await JS.Confirmar("top-center", "error", "Error", "Ya existe un usuario con este nombre de usuario", false, 2000);
        }
    }

    private async Task Eliminar()
    {
        if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea eliminar este usuario?", "question"))
        {
            bool eliminado = UsuariosBLL.Eliminar(usuarios.UsuarioId);

            if (eliminado)
            {
                await JS.Confirmar("top-center", "success", "Eliminado", "Eliminado correctamente", false, 2000);
                Nuevo();
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No se pudo eliminar", false, 2000);
            }
        }
    }

    private async Task Buscar()
    {
        if (usuarios.UsuarioId > 0)
        {
            var Encontrado = UsuariosBLL.Buscar(usuarios.UsuarioId);

            if (Encontrado != null)
            {
                this.usuarios = Encontrado;
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No se encontró el usuario", false, 2000);
            }
        }
    }

    private async Task Buscar(int UsuarioiD)
    {
        if (UsuarioiD > 0)
        {
            var Encontrado = UsuariosBLL.Buscar(UsuarioiD);

            if (Encontrado != null)
            {
                this.usuarios = Encontrado;
            }
            else
            {
                await JS.Confirmar("top-center", "error", "Error", "No se encontró el usuario", false, 2000);
            }
        }
    }

    private bool CambiarPassword()
    {
        Usuarios Usuario = UsuariosBLL.Buscar(usuarios.UsuarioId);
        bool paso = false;

        if (Usuario == null)
        {
            paso = false;
        }
        else
        {
            Usuario.PassWord = UsuariosBLL.encode("Cl@ve123");
            if(UsuariosBLL.Guardar(Usuario))
                paso = true;
        }
        return paso;
    }

    private async Task EnviarMail()
    {
        if (CambiarPassword())
        {
            if (UsuariosBLL.VerificarExistenciaDelUsuario(usuarios.NombreUsuario))
            {
                if (await JS.ConfirmDelete("Confirmar", "¿Esta seguro que desea restablecer esta contraseña?", "question"))
                {
                    //instancia de MailMessage con sus parametros configurados
                    MailMessage email = new MailMessage();
                    email.To.Add(new MailAddress(usuarios.Correo));
                    email.From = new MailAddress("eliangarciarguez@gmail.com");
                    email.Subject = "Buttersoft - Contraseña Restaurada (" + DateTime.Now.ToString("dd / MMM / yyy hh:mm:ss") + ") ";
                    email.Body = "<p>Estimado <strong>" + usuarios.Nombres + "</strong>, le informamos que su contraseña ha sido reestablecida. Su nueva contraseña es: <strong>Cl@ve123</strong> " +
                        "favor cambiar esta contraseña autogenerada en cuanto le sea posible. Gracias.</p>";
                    email.IsBodyHtml = true;
                    email.Priority = MailPriority.High;

                    //instancia de SMTP con sus parametros configurados
                    SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587);
                    smtp.EnableSsl = true;
                    smtp.Credentials = new NetworkCredential("eliangarciarguez@gmail.com", "Garcia5...");

                    try
                    {
                        smtp.Send(email);
                        email.Dispose();
                        await JS.Confirmar("top-center", "success", "Enviado", "El correo se envio correctamente", false, 2000);
                    }
                    catch (Exception ex)
                    {
                        await JS.Confirmar("top-center", "error", "Error", "No se pudo enviar el correo", false, 2000);
                    }
                }
            }
        }
        else
        {
            await JS.Confirmar("top-center", "error", "Error", "No se pencontro el usuario", false, 2000);
        }
    }
}
